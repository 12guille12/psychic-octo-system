from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from flask import Flask
import asyncio
import os

# ---------------- TOKEN ----------------
TOKEN = "8176470078:AAGCJrV0dzYa_RAX_Bm49vpPZD7aUfhj8dg"

# ---------------- BOT ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    botones = [["Ver menú", "Reservar"], ["Contacto"]]
    markup = ReplyKeyboardMarkup(botones, resize_keyboard=True)
    await update.message.reply_text("¡Bienvenido! Pulsa un botón para ver opciones.", reply_markup=markup)

async def responder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    texto = update.message.text
    if texto == "Ver menú":
        await update.message.reply_text("Menú:\n- Pizza: 8€\n- Pasta: 10€")
    elif texto == "Reservar":
        await update.message.reply_text("Envía tu nombre y fecha de reserva.")
    elif texto == "Contacto":
        await update.message.reply_text("Tel: 123-456-789\nEmail: demo@correo.com")
    else:
        await update.message.reply_text("Pulsa un botón para elegir una opción.")

# ---------------- FLASK PARA 24/7 ----------------
flask_app = Flask('')

@flask_app.route('/')
def home():
    return "Bot activo 24/7"

def run_flask():
    flask_app.run(host='0.0.0.0', port=8080)

# ---------------- EJECUCIÓN DEL BOT + FLASK ----------------
if __name__ == "__main__":

    app_bot = ApplicationBuilder().token(TOKEN).build()
    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), responder))

    # Mostrar URL pública probable de Replit
    slug = os.environ.get("REPL_SLUG")
    owner = os.environ.get("REPL_OWNER")
    if slug and owner:
        print("Tu URL pública probable: https://%s.%s.repl.co" % (slug.lower(), owner.lower()))
    else:
        print("No se encontró REPL_SLUG/REPL_OWNER. Mira la URL del proyecto en tu navegador.")

    # Ejecutar bot en segundo plano y Flask en principal
    async def main():
        asyncio.create_task(app_bot.run_polling())
        run_flask()  # Flask corre en el hilo principal, Replit activa URL pública

    asyncio.run(main())
